{"version":3,"sources":["reducers/users/reducer.ts","reducers/orders/reducer.ts","reducers/books/reducer.ts","reducers/cart/reducer.ts","reducers/me/reducer.ts","reducers/rootReducer.ts","reducers/store.ts","components/Nav.tsx","pages/Authentication.tsx","App.tsx","serviceWorker.ts","index.tsx","reducers/orders/types.ts","reducers/helpers/index.ts","reducers/books/types.ts","reducers/me/types.ts","reducers/me/hooks.ts","routes.ts","reducers/cart/types.ts","reducers/me/actions.ts","reducers/users/crud.ts","reducers/users/actions.ts","reducers/users/hooks.ts","reducers/users/types.ts","reducers/helpers/storage.ts","reducers/helpers/crud.ts","allowedActionsConfig.ts"],"names":["initialState","users","loading","hasLoaded","errorMessage","state","type","payload","ActionTypes","setUsers","addUsers","fetchStart","fetchEnd","orders","reducer","setOrders","addOrder","order","updateOrders","replace","books","setBooks","addBooks","updateBooks","deleteBooks","filter","id","find","book","items","setItems","addItem","existingItem","item","map","quantity","removeItem","me","role","UserRoles","unAuthenticated","set","clear","rootReducer","combineReducers","cartItems","persistConfig","key","storage","whitelist","persistReducer","store","configureStore","middleware","getDefaultMiddleware","serializableCheck","persistor","persistStore","Nav","pathname","useLocation","push","useHistory","useMe","AppBar","Tabs","variant","value","split","onChange","event","newValue","Object","keys","pages","k","roles","includes","noNav","Tab","label","name","Authentication","children","useGetUsers","useAuthenticate","authenticated","authenticate","useState","username","setUsername","password","setPassword","onSubmit","e","preventDefault","Backdrop","open","CircularProgress","TextField","fullWidth","target","disabled","required","Button","Typography","color","user","HomePage","lazy","UsersPage","LogoutPage","MyOrders","UserOrders","AdminBookList","App","Container","basename","process","Toolbar","fallback","path","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","orderStatuses","timeout","delay","Promise","resolve","setTimeout","updated","arr","v","u","useSelector","useLogout","clearMe","dispatch","useDispatch","useCallback","useMeActions","useEffect","client","admin","href","orderId","userId","setMe","crud","getItems","createItems","getUsers","postUsers","a","savedUsers","authenticatedUser","Error","initialUsers","surname","forceFetch","length","createdUsers","console","log","redirect","setRedirect","history","useMemo","message","apiAuthenticate","useAllowAdmin","useAllowedActions","orderStatus","isAllowedOrderAction","getFromStorage","defaultValue","JSON","parse","localStorage","getItem","cachedStorage","data","get","setItem","stringify","setToStorage","storageKey","newItems","_items","uuid","_newItems","reduce","acc","_itemsStorage","updateItems","updatedItems","deleteItems","ids","deletedItems","_keys","actions","cancelMyOrder","userRoles","created","dispatched","adminCancelOrder","adminDispatchOrder","adminCompleteOrder","userRole","action"],"mappings":"sSAGMA,EAAe,CACnBC,MAAO,GACPC,SAAS,EACTC,WAAW,EACXC,aAAc,IAyBDH,EAtBD,WAA2F,IAA1FI,EAAyF,uDAAjFL,EAAiF,yCAAjDM,EAAiD,EAAjDA,KAAMC,EAA2C,EAA3CA,QAC3D,OAAQD,GACN,KAAKE,IAAYC,SACf,OAAO,eAAKJ,EAAZ,CAAmBJ,MAAOM,EAAQN,QAEpC,KAAKO,IAAYE,SACf,OAAO,eAAKL,EAAZ,CAAmBJ,MAAM,GAAD,mBAAMM,EAAQN,OAAd,YAAwBI,EAAMJ,UAExD,KAAKO,IAAYG,WACf,OAAO,eAAKN,EAAZ,CAAmBH,SAAS,IAC9B,KAAKM,IAAYI,SACf,OAAO,eACFP,EADL,CAEED,aAAeG,GAAWA,EAAQH,cAAiB,GACnDF,SAAS,EACTC,WAAW,IAEf,QACE,OAAOE,I,gBCxBPL,EAAe,CACnBa,OAAQ,GACRX,SAAS,EACTC,WAAW,GAqBEW,EAlBC,WAA6F,IAA5FT,EAA2F,uDAAnFL,EAAmF,yCAAlDM,EAAkD,EAAlDA,KAAMC,EAA4C,EAA5CA,QAC9D,OAAQD,GACN,KAAKE,IAAYO,UACf,OAAO,eAAKV,EAAZ,CAAmBQ,OAAQN,EAAQM,SACrC,KAAKL,IAAYQ,SACf,OAAO,eAAKX,EAAZ,CAAmBQ,OAAO,CAAEN,EAAQU,OAAX,mBAAqBZ,EAAMQ,WAEtD,KAAKL,IAAYU,aACf,OAAO,eAAKb,EAAZ,CAAmBQ,OAAQM,YAAQZ,EAAQM,OAAQR,EAAMQ,UAC3D,KAAKL,IAAYG,WACf,OAAO,eAAKN,EAAZ,CAAmBH,SAAS,IAC9B,KAAKM,IAAYI,SACf,OAAO,eAAKP,EAAZ,CAAmBH,SAAS,EAAOC,WAAW,IAChD,QACE,OAAOE,I,QCpBPL,EAAe,CACnBoB,MAAO,GACPlB,SAAS,EACTC,WAAW,EACXC,aAAc,IA6BDH,EA1BD,WAA2F,IAA1FI,EAAyF,uDAAjFL,EAAiF,yCAAjDM,EAAiD,EAAjDA,KAAMC,EAA2C,EAA3CA,QAC3D,OAAQD,GACN,KAAKE,IAAYa,SACf,OAAO,eAAKhB,EAAZ,CAAmBe,MAAOb,EAAQa,QAEpC,KAAKZ,IAAYc,SACf,OAAO,eAAKjB,EAAZ,CAAmBe,MAAM,GAAD,mBAAMb,EAAQa,OAAd,YAAwBf,EAAMe,UAExD,KAAKZ,IAAYe,YACf,OAAO,eAAKlB,EAAZ,CAAmBe,MAAOD,YAAQZ,EAAQa,MAAOf,EAAMe,SAEzD,KAAKZ,IAAYgB,YACf,OAAO,eACFnB,EADL,CAEEe,MAAOf,EAAMe,MAAMK,QAAO,gBAAGC,EAAH,EAAGA,GAAH,OAAanB,EAAQa,MAAMO,MAAK,SAACC,GAAD,OAAgBA,EAAKF,KAAOA,UAG1F,KAAKlB,IAAYG,WACf,OAAO,eAAKN,EAAZ,CAAmBH,SAAS,IAC9B,KAAKM,IAAYI,SACf,OAAO,eAAKP,EAAZ,CAAmBH,SAAS,EAAOC,WAAW,IAChD,QACE,OAAOE,I,QC9BPL,EAAe,CACnB6B,MAAO,GACP3B,SAAS,EACTC,WAAW,GAuCEW,EApCC,WAAyF,IAAxFT,EAAuF,uDAA/EL,EAA+E,yCAAhDM,EAAgD,EAAhDA,KAAMC,EAA0C,EAA1CA,QAC5D,OAAQD,GACN,KAAKE,IAAYsB,SACf,OAAO,eAAKzB,EAAZ,CAAmBwB,MAAOtB,EAAQsB,QAEpC,KAAKrB,IAAYuB,QAAU,IACjBF,EAAUxB,EAAVwB,MACFG,EAAeH,EAAMF,MAAK,qBAAGD,KAAgBnB,EAAQ0B,KAAKP,MAChE,OAAIM,EACK,eACF3B,EADL,CAEEwB,MAAOA,EAAMK,KAAI,SAAAD,GAAI,OACnBA,EAAKP,KAAOM,EAAaN,GAAzB,eAAmCM,EAAnC,CAAiDG,SAAUH,EAAaG,SAAW,IAAMF,OAIxF,eAAK5B,EAAZ,CAAmBwB,MAAM,GAAD,mBAAMxB,EAAMwB,OAAZ,gBAAwBtB,EAAQ0B,KAAhC,CAAsCE,SAAU,QAE1E,KAAK3B,IAAY4B,WAAa,IACpBP,EAAUxB,EAAVwB,MACFG,EAAeH,EAAMF,MAAK,qBAAGD,KAAgBnB,EAAQ0B,KAAKP,MAChE,OAAIM,GAAgBA,EAAaG,SAAW,EACnC,eACF9B,EADL,CAEEwB,MAAOA,EAAMK,KAAI,SAAAD,GAAI,OACnBA,EAAKP,KAAOM,EAAaN,GAAzB,eAAmCM,EAAnC,CAAiDG,SAAUH,EAAaG,SAAW,IAAMF,OAIxF,eAAK5B,EAAZ,CAAmBwB,MAAOA,EAAMJ,QAAO,SAAAQ,GAAI,OAAIA,EAAKP,KAAOnB,EAAQ0B,KAAKP,QAE1E,QACE,OAAOrB,I,QCrCPL,EAAe,CACnBqC,GAAI,KACJC,KAAMC,IAAUC,gBAChBtC,SAAS,EACTC,WAAW,GAgBEW,EAbC,WAAqF,IAApFT,EAAmF,uDAA3EL,EAA2E,yCAA9CM,EAA8C,EAA9CA,KAAMC,EAAwC,EAAxCA,QAC1D,OAAQD,GACN,KAAKE,IAAYiC,IACf,OAAO,eAAKpC,EAAZ,CAAmBgC,GAAI9B,EAAQ8B,GAAIC,KAAM/B,EAAQ8B,GAAGC,OAEtD,KAAK9B,IAAYkC,MACf,OAAO1C,EAET,QACE,OAAOK,ICLEsC,EARKC,0BAAgB,CAClC3C,QACAY,SACAO,QACAyB,YACAR,OCPIS,EAAgB,CACpBC,IAAK,OACLC,YACAC,UAAW,CAAC,KAAM,cAGdnC,EAAUoC,YAAeJ,EAAeH,GAExCQ,EAAQC,YAAe,CAC3BtC,UACAuC,WAAYC,YAAqB,CAC/BC,mBAAmB,MAIRJ,IAEFK,EAAYC,YAAaN,G,2CCEvBO,EAlBH,WAAO,IACTC,EAAaC,cAAbD,SACAE,EAASC,cAATD,KACAvB,EAASyB,cAATzB,KAER,OACE,kBAAC0B,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAMC,QAAQ,aAAaC,MAAO,WAAIR,EAASS,MAAM,KAAK,MAAQ,EAAKC,SAHtD,SAACC,EAA8BC,GAA/B,OAAoDV,EAAKU,KAIvEC,OAAOC,KAAKC,KACVjD,QAAO,SAAAkD,GAAC,OAAID,IAAMC,GAAGC,MAAMC,SAASvC,KAAUoC,IAAMC,GAAGG,SACvD5C,KAAI,SAAAyC,GAAC,OACJ,kBAACI,EAAA,EAAD,CAAKhC,IAAK4B,EAAGR,MAAOQ,EAAGK,MAAON,IAAMC,GAAGM,a,6DCiDpCC,GA5DQ,SAAC,GAAiD,IAA/CC,EAA8C,EAA9CA,SACxBC,cADsE,MAEPC,cAAvDC,EAF8D,EAE9DA,cAAeC,EAF+C,EAE/CA,aAAcnF,EAFiC,EAEjCA,aAAcF,EAFmB,EAEnBA,QAFmB,EAGtCsF,mBAAS,IAH6B,mBAG/DC,EAH+D,KAGrDC,EAHqD,OAItCF,mBAAS,IAJ6B,mBAI/DG,EAJ+D,KAIrDC,EAJqD,KAStE,OAAIN,EACK,6BAAMH,GAGb,0BAAMU,SARa,SAACC,GACpBA,EAAEC,iBACFR,EAAaE,EAAUE,KAOrB,kBAACK,EAAA,EAAD,CAAUC,OAAQ/F,GAChB,kBAACgG,EAAA,EAAD,OAEF,kBAACC,EAAA,EAAD,CACE7F,KAAK,OACL0E,MAAM,WACNoB,WAAS,EACTjC,MAAOsB,EACPpB,SAAU,SAAAyB,GAAC,OAAIJ,EAAYI,EAAEO,OAAOlC,QACpCmC,WAAYpG,EACZqG,UAAQ,IAGV,kBAACJ,EAAA,EAAD,CACE7F,KAAK,WACL0E,MAAM,WACNoB,WAAS,EACTjC,MAAOwB,EACPtB,SAAU,SAAAyB,GAAC,OAAIF,EAAYE,EAAEO,OAAOlC,QACpCmC,WAAYpG,EACZqG,UAAQ,IAGV,kBAACC,EAAA,EAAD,CAAQlG,KAAK,UAAb,SAECF,GACC,kBAACqG,EAAA,EAAD,CAAYvC,QAAQ,KAAKwC,MAAM,SAC5BtG,GAIL,6BACE,6CACCH,GAAMiC,KAAI,SAAAyE,GAAI,OACb,yBAAK5D,IAAK4D,EAAKjF,IACb,0CAAgBiF,EAAKlB,UACrB,0CAAgBkB,EAAKhB,UACrB,sCAAYgB,EAAKrE,MACjB,oC,SC/CNsE,GAAWC,gBAAK,kBAAM,uDACtBC,GAAYD,gBAAK,kBAAM,iCACvBE,GAAaF,gBAAK,kBAAM,iCACxBG,GAAWH,gBAAK,kBAAM,iCACtBI,GAAaJ,gBAAK,kBAAM,iCACxBK,GAAgBL,gBAAK,kBAAM,iCA6BlBM,GA3BH,WACV,OACE,kBAAC,IAAD,CAAUhE,MAAOA,GACf,kBAAC,KAAD,CAAajD,QAAS,KAAMsD,UAAWA,GACrC,kBAAC4D,EAAA,EAAD,KACE,kBAAC,IAAD,CAAQC,SAAQ,UAAKC,0BAAL,MACd,kBAAC,EAAD,MACA,kBAACC,EAAA,EAAD,MACA,kBAAC,WAAD,CAAUC,SAAU,kBAACtB,EAAA,EAAD,OAClB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOuB,KAAK,IAAIC,OAAK,EAACC,UAAWf,KACjC,kBAAC,GAAD,KACE,kBAAC,IAAD,CAAOa,KAAK,aAAaC,OAAK,EAACC,UAAWT,KAC1C,kBAAC,IAAD,CAAOO,KAAK,SAASC,OAAK,EAACC,UAAWb,KACtC,kBAAC,IAAD,CAAOW,KAAK,wBAAwBC,OAAK,EAACC,UAAWV,KACrD,kBAAC,IAAD,CAAOQ,KAAK,UAAUC,OAAK,EAACC,UAAWZ,KACvC,kBAAC,IAAD,CAAOU,KAAK,aAAaC,OAAK,EAACC,UAAWX,aCtBxCY,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,GAAD,MAASC,SAASC,eAAe,SDsI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB,gCE3IZ,IAAKlI,EAQAmI,EARZ,oE,SAAYnI,K,6BAAAA,E,2BAAAA,E,gCAAAA,E,+BAAAA,E,4BAAAA,M,cAQAmI,K,kBAAAA,E,wBAAAA,E,oBAAAA,E,uBAAAA,M,sCCVZ,oEAAO,IAAMC,EAAU,SAACC,GAAD,OAAmB,IAAIC,SAAQ,SAAAC,GAAO,OAAIC,WAAWD,EAASF,OAMxE1H,EAAU,SAAmB8H,EAAcC,GAAjC,OACrBA,EAAIhH,KAAI,SAAAiH,GAAC,OAAIF,EAAQtH,MAAK,SAAAyH,GAAC,OAAID,EAAEzH,KAAO0H,EAAE1H,OAAOyH,O,gCCP5C,IAAK3I,EAAZ,kC,SAAYA,K,0BAAAA,E,gCAAAA,E,0BAAAA,E,gCAAAA,E,8BAAAA,E,2BAAAA,M,sCCEL,IAAKA,EAAZ,kC,SAAYA,K,aAAAA,E,kBAAAA,M,sCCFZ,uGAMauD,EAAQ,WAEnB,OADWsF,aAAY,SAAChJ,GAAD,OAAwBA,EAAMgC,OAY1CiH,EAAY,WAAO,IACtBC,EATkB,WAC1B,IAAMC,EAAWC,cAEjB,MAAO,CACLF,QAASG,uBAAY,kBAAMF,EAASD,iBAAY,CAACC,KAK/BG,GAAZJ,QACA1F,EAASC,cAATD,KACR+F,qBAAU,WACR/F,EAAK,KACL0F,MACC,CAACA,EAAS1F,M,gCCzBf,6CAWaa,EAAe,CAC1B,IAAK,CACHO,KAAM,QACNL,MAAO,CAACrC,IAAUC,gBAAiBD,IAAUsH,OAAQtH,IAAUuH,OAC/DC,KAAM,iBAAM,MAEd,aAAc,CACZ9E,KAAM,YACNL,MAAO,CAACrC,IAAUuH,OAClBC,KAAM,iBAAM,eAEd,aAAc,CACZ9E,KAAM,YACNL,MAAO,CAACrC,IAAUsH,QAClBE,KAAM,iBAAM,eAEd,sBAAuB,CACrB9E,KAAM,YACNL,MAAO,CAACrC,IAAUsH,QAClB/E,OAAO,EACPiF,KAAM,SAACC,GAAD,2BAAmCA,KAE3C,SAAU,CACR/E,KAAM,YACNL,MAAO,CAACrC,IAAUuH,OAClBC,KAAM,iBAAM,WAEd,wBAAyB,CACvB9E,KAAM,YACNL,MAAO,CAACrC,IAAUuH,MAAOvH,IAAUsH,QACnC/E,OAAO,EACPiF,KAAM,SAACE,GAAD,uBAA8BA,EAA9B,aAER,iCAAkC,CAChChF,KAAM,YACNL,MAAO,CAACrC,IAAUuH,MAAOvH,IAAUsH,QACnC/E,OAAO,EACPiF,KAAM,SAACE,EAAgBD,GAAjB,uBAA+CC,EAA/C,mBAAgED,KAExE,SAAU,CACR/E,KAAM,QACNL,MAAO,CAACrC,IAAUC,iBAClBuH,KAAM,iBAAM,YAEd,UAAW,CACT9E,KAAM,SACNL,MAAO,CAACrC,IAAUuH,MAAOvH,IAAUsH,QACnCE,KAAM,iBAAM,c,gCCxDT,IAAKvJ,EAAZ,kC,SAAYA,K,wBAAAA,E,uBAAAA,E,8BAAAA,M,sCCFZ,gFAEa0J,EAAQ,SAAC7H,GAAD,MAAa,CAChC/B,KAAME,IAAYiC,IAClBlC,QAAS,CAAE8B,QAGAkH,EAAU,iBAAO,CAC5BjJ,KAAME,IAAYkC,S,qGCLcyH,YAAW,SAArCC,E,EAAAA,SAAUC,E,EAAAA,YAELC,EAAWF,EAEXG,EAAYF,EAEZ9E,EAAY,uCAAG,WAAOE,EAAkBE,GAAzB,iBAAA6E,EAAA,sEACDF,IADC,UACpBG,EADoB,SAEpBC,EAAoBD,EAAW9I,MAAK,SAAAgF,GAAI,OAAIA,EAAKlB,WAAaA,GAAYkB,EAAKhB,WAAaA,MAFxE,yCAIjB+E,GAJiB,aAMpB,IAAIC,MAAM,yBANU,2CAAH,wD,QCJnBC,EAAe,CACnB,CACElJ,GAAI,IACJuD,KAAM,SACN4F,QAAS,QACTpF,SAAU,OACVE,SAAU,YACVrD,KAAMC,IAAUuH,OAElB,CACEpI,GAAI,IACJuD,KAAM,OACN4F,QAAS,OACTpF,SAAU,SACVE,SAAU,MACVrD,KAAMC,IAAUsH,SAIPpJ,EAAW,SAACR,GAAD,MAAoB,CAC1CK,KAAME,IAAYC,SAClBF,QAAS,CAAEN,WAkBAU,EAAa,iBAAO,CAC/BL,KAAME,IAAYG,aAGPC,EAAW,SAACR,GAAD,MAA4B,CAClDE,KAAME,IAAYI,SAClBL,QAAS,CAAEH,kB,gKCxCN,IAAMgF,EAAc,SAAC0F,GAC1B,IAAMtB,EAAWC,cADkC,EAECJ,aAAY,SAAChJ,GAAD,OAAwBA,EAAMJ,SAAtFA,EAF2C,EAE3CA,MAAOC,EAFoC,EAEpCA,QAASC,EAF2B,EAE3BA,UAAWC,EAFgB,EAEhBA,aAQnC,OANAwJ,qBAAU,WACFzJ,IAAa2K,GAAgB5K,GACjCsJ,EDqCqB,uCAAgB,WAAMA,GAAN,iBAAAgB,EAAA,6DACzChB,EAAS7I,KADgC,kBAGnB2J,IAHmB,UAIlB,KADfrK,EAHiC,QAI7B8K,OAJ6B,iCAKVR,EAAUK,GALA,OAK/BI,EAL+B,OAMrCxB,EAAS/I,EAASuK,IANmB,QAQjC/K,GACJuJ,EAAS/I,EAASR,IAEpBuJ,EAAS5I,KAX8B,kDAavCqK,QAAQC,IAAR,MACA1B,EAAS5I,KAd8B,0DAAhB,yDCnCtB,CAACT,EAAWD,EAAS4K,EAAYtB,IAE7B,CACLvJ,QACAC,UACAC,YACAC,iBAISiF,EAAkB,WAC7B,IAAMmE,EAAWC,cADkB,EAEHjE,oBAAS,GAFN,mBAE5B2F,EAF4B,KAElBC,EAFkB,KAG3B/I,EAAOgH,aAAY,SAAChJ,GAAD,OAAwBA,EAAMgC,MAAjDA,GAH2B,EAIDgH,aAAY,SAAChJ,GAAD,OAAwBA,EAAMJ,SAApEG,EAJ2B,EAI3BA,aAAcF,EAJa,EAIbA,QAChBmL,EAAUvH,cAEVwB,EAAgBgG,mBAAQ,mBAAQjJ,IAAI,CAACA,IAErCkD,EAAemE,uBACnB,SAACjE,EAAkBE,GACjByF,GAAY,GACZ5B,ED2CyB,SAAC/D,EAAkBE,GAAnB,8CAAkD,WAAM6D,GAAN,eAAAgB,EAAA,6DAC/EhB,EAAS7I,KADsE,kBAG7C4E,EAAaE,EAAUE,GAHsB,OAGvE+E,EAHuE,OAI7ElB,EAASU,YAAMQ,IACflB,EAAS5I,KALoE,gDAO7EqK,QAAQC,IAAR,MACA1B,EAAS5I,EAAS,KAAE2K,UARyD,yDAAlD,sDC3ChBC,CAAgB/F,EAAUE,MAErC,CAAC6D,IAUH,OAPAI,qBAAU,WACJuB,IACFC,GAAY,GACZC,EAAQxH,KAAK,QAEd,CAACsH,EAAUE,IAEP,CACL/F,gBACAC,eACAnF,eACAF,YAISuL,EAAgB,WAAO,IAC1BpJ,EAAO0B,cAAP1B,GACAwB,EAASC,cAATD,KAER+F,qBAAU,WACJvH,GAAMA,EAAGC,OAASC,IAAUuH,OAC9BjG,EAAK,OAEN,CAACxB,EAAIwB,KAGG6H,EAAoB,WAAO,IAC9BpJ,EAASyB,cAATzB,KACR,OAAO,SAACqJ,EAA4B5I,GAA7B,OAAoD6I,YAAqBtJ,EAAMqJ,EAAa5I,M,+BCzE9F,IAAKvC,EASA+B,EATZ,oE,SAAY/B,K,0BAAAA,E,gCAAAA,E,gCAAAA,E,0BAAAA,E,8BAAAA,E,2BAAAA,M,cASA+B,K,cAAAA,E,gBAAAA,E,mCAAAA,M,iGCTCsJ,EAAiB,SAAC9I,EAAa+I,GAAd,OAC5BC,KAAKC,MAAMC,aAAaC,QAAQnJ,IAAQ+I,IAK7BK,EAAgB,SAAIpJ,EAAa+I,GAC5C,IAAIM,EAAUP,EAAe9I,EAAK+I,GAYlC,MAAO,CACLO,IAR2B,WAC3B,OAAID,IAGJA,EAAOP,EAAe9I,EAAK+I,KAK3BrJ,IAbyB,SAAC0B,GAC1BiI,EAAOjI,EANiB,SAAYpB,EAAaoB,GACnD8H,aAAaK,QAAQvJ,EAAKgJ,KAAKQ,UAAUpI,IAMvCqI,CAAgBzJ,EAAKoB,M,0CCFlB,IAAMgG,EAAO,SAA4BsC,GAQ9C,IAAMzJ,EAAUmJ,EACdM,EACAV,KAAKQ,UAAU,CACb1K,MAAO,GACP4C,KAAM,MAyDV,MAAO,CACL2F,SAtDY,uCAAG,gCAAAI,EAAA,+DAESxH,EAAQqJ,MAAxBxK,EAFO,EAEPA,MAAO4C,EAFA,EAEAA,KAFA,kBAGRA,EAAKvC,KAAI,SAAAyC,GAAC,OAAI9C,EAAM8C,OAHZ,2CAAH,qDAuDZ0F,YAjDe,uCAAG,WAAOqC,GAAP,yBAAAlC,EAAA,sEACZ5B,YAAQ,KADI,gBAEM5F,EAAQqJ,MAAxB5H,EAFU,EAEVA,KAAM5C,EAFI,EAEJA,MACR8K,EAASD,EAASxK,KAAI,SAAAD,GAAI,sBAAUA,EAAV,CAAgBP,GAAIkL,sBAC9CC,EAAYF,EAAOG,QAAO,SAACC,EAAK9K,GAAN,sBAAqB8K,EAArB,eAA2B9K,EAAKP,GAAKO,MAAS,IACxE+K,EAAgB,CACpBvI,KAAK,GAAD,mBAAMA,GAAN,YAAeD,OAAOC,KAAKoI,KAC/BhL,MAAM,eAAMA,EAAP,GAAiBgL,IAExB7J,EAAQP,IAAIuK,GATM,kBAUXL,GAVW,2CAAH,sDAkDfM,YArCe,uCAAG,WAAOC,GAAP,uBAAA1C,EAAA,sEACZ5B,YAAQ,KADI,gBAEM5F,EAAQqJ,MAAxB5H,EAFU,EAEVA,KAAM5C,EAFI,EAEJA,MAER8K,EAASO,EAAaJ,QAAO,SAACC,EAAK9K,GAAN,sBAAqB8K,EAArB,eAA2B9K,EAAKP,IAAM,GAAKO,MAAS,IAEjF+K,EAAgB,CACpBvI,OACA5C,MAAM,eAAMA,EAAP,GAAiB8K,IAGxB3J,EAAQP,IAAIuK,GAXM,kBAaXE,GAbW,2CAAH,sDAsCfC,YAtBe,uCAAG,WAAOC,GAAP,2BAAA5C,EAAA,sEACZ5B,YAAQ,KADI,gBAEM5F,EAAQqJ,MAAxB5H,EAFU,EAEVA,KAAM5C,EAFI,EAEJA,MAERwL,EAAeD,EAAIlL,KAAI,SAAAR,GAAE,OAAIG,EAAMH,MACnC4L,EAAQ7I,EAAKhD,QAAO,SAAAkD,GAAC,OAAKyI,EAAIvI,SAASF,MACvCgI,EAASW,EAAMR,QAAO,SAACC,EAAKpI,GAAN,sBAAkBoI,EAAlB,eAAwBpI,EAAI9C,EAAM8C,OAAO,IAE/DqI,EAAgB,CACpBvI,OACA5C,MAAO8K,GAGT3J,EAAQP,IAAIuK,GAbM,kBAeXK,GAfW,2CAAH,yD,gCC3DnB,uFAGaE,EAAU,CACrBC,cAAe,CACbC,UAAW,CAAClL,IAAUsH,QACtBlB,cAAe,CAACA,IAAc+E,QAAS/E,IAAcgF,aAEvDC,iBAAkB,CAChBH,UAAW,CAAClL,IAAUuH,OACtBnB,cAAe,CAACA,IAAc+E,QAAS/E,IAAcgF,aAEvDE,mBAAoB,CAClBJ,UAAW,CAAClL,IAAUuH,OACtBnB,cAAe,CAACA,IAAc+E,UAEhCI,mBAAoB,CAClBL,UAAW,CAAClL,IAAUuH,OACtBnB,cAAe,CAACA,IAAcgF,cAOrB/B,EAAuB,SAACmC,EAAqBpC,EAA4BqC,GAAlD,OAClCA,EAAOrF,cAAc9D,SAAS8G,IAAgBqC,EAAOP,UAAU5I,SAASkJ,K","file":"static/js/main.6b7826e9.chunk.js","sourcesContent":["import { ReducerAction } from '../store';\nimport { ActionTypes, UsersReducer } from './types';\n\nconst initialState = {\n  users: [],\n  loading: false,\n  hasLoaded: false,\n  errorMessage: '',\n};\n\nconst users = (state = initialState as UsersReducer, { type, payload }: ReducerAction): UsersReducer => {\n  switch (type) {\n    case ActionTypes.setUsers: {\n      return { ...state, users: payload.users };\n    }\n    case ActionTypes.addUsers: {\n      return { ...state, users: [...payload.users, ...state.users] };\n    }\n    case ActionTypes.fetchStart:\n      return { ...state, loading: true };\n    case ActionTypes.fetchEnd:\n      return {\n        ...state,\n        errorMessage: (payload && payload.errorMessage) || '',\n        loading: false,\n        hasLoaded: true,\n      };\n    default:\n      return state;\n  }\n};\n\nexport default users;\n","import { ReducerAction } from '../store';\nimport { OrdersReducer, ActionTypes } from './types';\nimport { replace } from '../helpers';\n\nconst initialState = {\n  orders: [],\n  loading: false,\n  hasLoaded: false,\n};\n\nconst reducer = (state = initialState as OrdersReducer, { type, payload }: ReducerAction): OrdersReducer => {\n  switch (type) {\n    case ActionTypes.setOrders:\n      return { ...state, orders: payload.orders };\n    case ActionTypes.addOrder: {\n      return { ...state, orders: [payload.order, ...state.orders] };\n    }\n    case ActionTypes.updateOrders:\n      return { ...state, orders: replace(payload.orders, state.orders) };\n    case ActionTypes.fetchStart:\n      return { ...state, loading: true };\n    case ActionTypes.fetchEnd:\n      return { ...state, loading: false, hasLoaded: true };\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n","import { ReducerAction } from '../store';\nimport { ActionTypes, BooksReducer, Book } from './types';\nimport { replace } from '../helpers';\n\nconst initialState = {\n  books: [],\n  loading: false,\n  hasLoaded: false,\n  errorMessage: '',\n};\n\nconst users = (state = initialState as BooksReducer, { type, payload }: ReducerAction): BooksReducer => {\n  switch (type) {\n    case ActionTypes.setBooks: {\n      return { ...state, books: payload.books };\n    }\n    case ActionTypes.addBooks: {\n      return { ...state, books: [...payload.books, ...state.books] };\n    }\n    case ActionTypes.updateBooks: {\n      return { ...state, books: replace(payload.books, state.books) };\n    }\n    case ActionTypes.deleteBooks: {\n      return {\n        ...state,\n        books: state.books.filter(({ id }) => !payload.books.find((book: Book) => book.id === id)),\n      };\n    }\n    case ActionTypes.fetchStart:\n      return { ...state, loading: true };\n    case ActionTypes.fetchEnd:\n      return { ...state, loading: false, hasLoaded: true };\n    default:\n      return state;\n  }\n};\n\nexport default users;\n","import { ReducerAction } from '../store';\nimport { ActionTypes, CartReducer } from './types';\n\nconst initialState = {\n  items: [],\n  loading: false,\n  hasLoaded: false,\n};\n\nconst reducer = (state = initialState as CartReducer, { type, payload }: ReducerAction): CartReducer => {\n  switch (type) {\n    case ActionTypes.setItems: {\n      return { ...state, items: payload.items };\n    }\n    case ActionTypes.addItem: {\n      const { items } = state;\n      const existingItem = items.find(({ id }) => id === payload.item.id);\n      if (existingItem) {\n        return {\n          ...state,\n          items: items.map(item =>\n            item.id === existingItem.id ? { ...existingItem, quantity: existingItem.quantity + 1 } : item,\n          ),\n        };\n      }\n      return { ...state, items: [...state.items, { ...payload.item, quantity: 1 }] };\n    }\n    case ActionTypes.removeItem: {\n      const { items } = state;\n      const existingItem = items.find(({ id }) => id === payload.item.id);\n      if (existingItem && existingItem.quantity > 1) {\n        return {\n          ...state,\n          items: items.map(item =>\n            item.id === existingItem.id ? { ...existingItem, quantity: existingItem.quantity - 1 } : item,\n          ),\n        };\n      }\n      return { ...state, items: items.filter(item => item.id !== payload.item.id) };\n    }\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n","import { ReducerAction } from '../store';\nimport { MeReducer, ActionTypes } from './types';\nimport { UserRoles } from '../users/types';\n\nconst initialState = {\n  me: null,\n  role: UserRoles.unAuthenticated,\n  loading: false,\n  hasLoaded: false,\n};\n\nconst reducer = (state = initialState as MeReducer, { type, payload }: ReducerAction): MeReducer => {\n  switch (type) {\n    case ActionTypes.set: {\n      return { ...state, me: payload.me, role: payload.me.role };\n    }\n    case ActionTypes.clear: {\n      return initialState;\n    }\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n","import { combineReducers } from 'redux';\nimport users from './users/reducer';\nimport orders from './orders/reducer';\nimport books from './books/reducer';\nimport cartItems from './cart/reducer';\nimport me from './me/reducer';\n\nconst rootReducer = combineReducers({\n  users,\n  orders,\n  books,\n  cartItems,\n  me,\n});\n\nexport default rootReducer;\n\nexport type RootReducer = ReturnType<typeof rootReducer>;\n","import { configureStore, getDefaultMiddleware, ThunkAction, Action } from '@reduxjs/toolkit';\nimport { persistStore, persistReducer } from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\nimport rootReducer, { RootReducer } from './rootReducer';\n\nconst persistConfig = {\n  key: 'root',\n  storage,\n  whitelist: ['me', 'cartItems'],\n};\n\nconst reducer = persistReducer(persistConfig, rootReducer);\n\nconst store = configureStore({\n  reducer,\n  middleware: getDefaultMiddleware({\n    serializableCheck: false,\n  }),\n});\n\nexport default store;\n\nexport const persistor = persistStore(store);\n\nexport type AppThunk = ThunkAction<void, RootReducer, null, Action<string>>;\n\nexport type AppDispatch = typeof store.dispatch;\n\nexport type ReducerAction = {\n  type: string;\n  payload: any; // eslint-disable-line\n  // TODO: define payload action types someday\n};\n","import React from 'react';\nimport { AppBar, Tabs, Tab } from '@material-ui/core';\nimport { useLocation, useHistory } from 'react-router';\nimport { useMe } from '../reducers/me/hooks';\nimport { pages } from '../routes';\n\nconst Nav = () => {\n  const { pathname } = useLocation();\n  const { push } = useHistory();\n  const { role } = useMe();\n  const handleChange = (event: React.ChangeEvent<{}>, newValue: string) => push(newValue);\n  return (\n    <AppBar>\n      <Tabs variant=\"scrollable\" value={`/${pathname.split('/')[1]}` || '/'} onChange={handleChange}>\n        {Object.keys(pages)\n          .filter(k => pages[k].roles.includes(role) && !pages[k].noNav)\n          .map(k => (\n            <Tab key={k} value={k} label={pages[k].name} />\n          ))}\n      </Tabs>\n    </AppBar>\n  );\n};\n\nexport default Nav;\n","import React, { useState } from 'react';\nimport { useAuthenticate, useGetUsers } from '../reducers/users/hooks';\nimport { Backdrop, CircularProgress, TextField, Button, Typography } from '@material-ui/core';\n\nimport users from '../_data/users.json';\n\nconst Authentication = ({ children }: { children: React.ReactNode }) => {\n  useGetUsers();\n  const { authenticated, authenticate, errorMessage, loading } = useAuthenticate();\n  const [username, setUsername] = useState('');\n  const [password, setPassword] = useState('');\n  const handleSubmit = (e: React.SyntheticEvent) => {\n    e.preventDefault();\n    authenticate(username, password);\n  };\n  if (authenticated) {\n    return <div>{children}</div>;\n  }\n  return (\n    <form onSubmit={handleSubmit}>\n      <Backdrop open={!!loading}>\n        <CircularProgress />\n      </Backdrop>\n      <TextField\n        type=\"text\"\n        label=\"Username\"\n        fullWidth\n        value={username}\n        onChange={e => setUsername(e.target.value)}\n        disabled={!!loading}\n        required\n      />\n\n      <TextField\n        type=\"password\"\n        label=\"Password\"\n        fullWidth\n        value={password}\n        onChange={e => setPassword(e.target.value)}\n        disabled={!!loading}\n        required\n      />\n\n      <Button type=\"submit\">Login</Button>\n\n      {errorMessage && (\n        <Typography variant=\"h5\" color=\"error\">\n          {errorMessage}\n        </Typography>\n      )}\n\n      <div>\n        <h4>Initial Users</h4>\n        {users.map(user => (\n          <div key={user.id}>\n            <div>Username: {user.username}</div>\n            <div>Password: {user.password}</div>\n            <div>Role: {user.role}</div>\n            <br />\n          </div>\n        ))}\n      </div>\n    </form>\n  );\n};\n\nexport default Authentication;\n","import React, { lazy, Suspense } from 'react';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport { CircularProgress, Container, Toolbar } from '@material-ui/core';\n\nimport store, { persistor } from './reducers/store';\n\nimport Nav from './components/Nav';\nimport Authentication from './pages/Authentication';\nimport { PersistGate } from 'redux-persist/integration/react';\n\nconst HomePage = lazy(() => import('./pages/HomePage'));\nconst UsersPage = lazy(() => import('./pages/UsersPage'));\nconst LogoutPage = lazy(() => import('./pages/Logout'));\nconst MyOrders = lazy(() => import('./pages/MyOrders'));\nconst UserOrders = lazy(() => import('./pages/UserOrders'));\nconst AdminBookList = lazy(() => import('./pages/AdminBookList'));\n\nconst App = () => {\n  return (\n    <Provider store={store}>\n      <PersistGate loading={null} persistor={persistor}>\n        <Container>\n          <Router basename={`${process.env.PUBLIC_URL}/`}>\n            <Nav />\n            <Toolbar />\n            <Suspense fallback={<CircularProgress />}>\n              <Switch>\n                <Route path=\"/\" exact component={HomePage} />\n                <Authentication>\n                  <Route path=\"/book-list\" exact component={AdminBookList} />\n                  <Route path=\"/users\" exact component={UsersPage} />\n                  <Route path=\"/users/:userId/orders\" exact component={UserOrders} />\n                  <Route path=\"/logout\" exact component={LogoutPage} />\n                  <Route path=\"/my-orders\" exact component={MyOrders} />\n                </Authentication>\n              </Switch>\n            </Suspense>\n          </Router>\n        </Container>\n      </PersistGate>\n    </Provider>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import { Item } from '../cart/types';\n\nexport enum ActionTypes {\n  setOrders = 'orders/setOrders',\n  addOrder = 'orders/addOrder',\n  updateOrders = 'oders/updateOrds',\n  fetchStart = 'orders/fetchStart',\n  fetchEnd = 'orders/fetchEnd',\n}\n\nexport enum orderStatuses {\n  created = 'created',\n  dispatched = 'dispatched',\n  canceled = 'canceled',\n  completed = 'completed',\n}\n\nexport interface Order {\n  id: string;\n  buyer: {\n    id: string;\n    name: string;\n    surname: string;\n    username: string;\n  };\n  status: orderStatuses;\n  items: Item[];\n}\n\nexport interface OrdersReducer {\n  orders: Order[];\n  loading: boolean;\n  hasLoaded: boolean;\n}\n","export const timeout = (delay: number) => new Promise(resolve => setTimeout(resolve, delay));\n\ninterface WithID {\n  id?: string;\n}\n\nexport const replace = <T extends WithID>(updated: T[], arr: T[]) =>\n  arr.map(v => updated.find(u => v.id === u.id) || v);\nexport const remove = <T extends WithID>(remove: T[], arr: T[]) =>\n  arr.filter(v => !remove.find(u => v.id === u.id) || v);\n","export enum ActionTypes {\n  setBooks = 'books/setBooks',\n  updateBooks = 'books/updateBooks',\n  addBooks = 'books/addBooks',\n  deleteBooks = 'books/deleteBooks',\n  fetchStart = 'books/fetchStart',\n  fetchEnd = 'books/fetchEnd',\n}\n\nexport interface Book {\n  id?: string;\n  title: string;\n  author: string;\n  publishedDate: string;\n  image: string;\n  quantity: number;\n  price: number;\n}\n\nexport interface Books {\n  [id: string]: Book;\n}\n\nexport interface BooksReducer {\n  books: Book[];\n  loading: boolean;\n  hasLoaded: boolean;\n  errorMessage: string;\n}\n","import { User, UserRoles } from '../users/types';\n\nexport enum ActionTypes {\n  set = 'me/set',\n  clear = 'me/clear',\n}\n\nexport type Me = User;\n\nexport interface MeReducer {\n  me: Me | null;\n  role: UserRoles;\n  loading: boolean;\n  hasLoaded: boolean;\n}\n","import { useSelector, useDispatch } from 'react-redux';\nimport { RootReducer } from '../rootReducer';\nimport { useCallback, useEffect } from 'react';\nimport { clearMe } from './actions';\nimport { useHistory } from 'react-router';\n\nexport const useMe = () => {\n  const me = useSelector((state: RootReducer) => state.me);\n  return me;\n};\n\nexport const useMeActions = () => {\n  const dispatch = useDispatch();\n\n  return {\n    clearMe: useCallback(() => dispatch(clearMe()), [dispatch]),\n  };\n};\n\nexport const useLogout = () => {\n  const { clearMe } = useMeActions();\n  const { push } = useHistory();\n  useEffect(() => {\n    push('/');\n    clearMe();\n  }, [clearMe, push]);\n};\n","import { UserRoles } from './reducers/users/types';\n\nexport interface Pages {\n  [path: string]: {\n    name: string;\n    roles: string[];\n    href: Function;\n    noNav?: boolean;\n  };\n}\n\nexport const pages: Pages = {\n  '/': {\n    name: 'Books',\n    roles: [UserRoles.unAuthenticated, UserRoles.client, UserRoles.admin],\n    href: () => '/',\n  },\n  '/book-list': {\n    name: 'Book List',\n    roles: [UserRoles.admin],\n    href: () => '/book-list',\n  },\n  '/my-orders': {\n    name: 'My Orders',\n    roles: [UserRoles.client],\n    href: () => '/my-orders',\n  },\n  '/my-orders/:orderId': {\n    name: 'My Orders',\n    roles: [UserRoles.client],\n    noNav: true,\n    href: (orderId: string) => `/my-orders/${orderId}`,\n  },\n  '/users': {\n    name: 'User List',\n    roles: [UserRoles.admin],\n    href: () => '/users',\n  },\n  '/users/:userId/orders': {\n    name: 'My Orders',\n    roles: [UserRoles.admin, UserRoles.client],\n    noNav: true,\n    href: (userId: string) => `/users/${userId}/orders`,\n  },\n  '/users/:userId/orders/:orderId': {\n    name: 'My Orders',\n    roles: [UserRoles.admin, UserRoles.client],\n    noNav: true,\n    href: (userId: string, orderId: string) => `/users/${userId}/orders/${orderId}`,\n  },\n  '/login': {\n    name: 'Login',\n    roles: [UserRoles.unAuthenticated],\n    href: () => '/logout',\n  },\n  '/logout': {\n    name: 'Logout',\n    roles: [UserRoles.admin, UserRoles.client],\n    href: () => '/logout',\n  },\n};\n","import { Book } from '../books/types';\n\nexport enum ActionTypes {\n  setItems = 'cart/setCart',\n  addItem = 'cart/addItem',\n  removeItem = 'cart/removeItem',\n}\n\nexport type Item = Book;\n\nexport interface CartItems {\n  id: string;\n  items: Item[];\n}\n\nexport interface CartReducer {\n  items: Item[];\n  loading: boolean;\n  hasLoaded: boolean;\n}\n","import { Me, ActionTypes } from './types';\n\nexport const setMe = (me: Me) => ({\n  type: ActionTypes.set,\n  payload: { me },\n});\n\nexport const clearMe = () => ({\n  type: ActionTypes.clear,\n});\n","import { crud } from '../helpers/crud';\nimport { User } from './types';\n\nconst { getItems, createItems } = crud<User>('users');\n\nexport const getUsers = getItems;\n\nexport const postUsers = createItems;\n\nexport const authenticate = async (username: string, password: string): Promise<User> => {\n  const savedUsers = await getUsers();\n  const authenticatedUser = savedUsers.find(user => user.username === username && user.password === password);\n  if (authenticatedUser) {\n    return authenticatedUser;\n  }\n  throw new Error('Incorrect credentials');\n};\n","import { User, ActionTypes, UserRoles } from './types';\nimport { AppThunk } from '../store';\nimport { getUsers, postUsers, authenticate } from './crud';\nimport { setMe } from '../me/actions';\n\nconst initialUsers = [\n  {\n    id: '1',\n    name: 'Yagami',\n    surname: 'Light',\n    username: 'Kira',\n    password: 'DeathNode',\n    role: UserRoles.admin,\n  },\n  {\n    id: '2',\n    name: 'User',\n    surname: 'Some',\n    username: 'simple',\n    password: '123',\n    role: UserRoles.client,\n  },\n];\n\nexport const setUsers = (users: User[]) => ({\n  type: ActionTypes.setUsers,\n  payload: { users },\n});\n\nexport const updateUsers = (users: User[]) => ({\n  type: ActionTypes.updateUsers,\n  payload: { users },\n});\n\nexport const removeUsers = (ids: [string]) => ({\n  type: ActionTypes.removeUsers,\n  payload: { ids },\n});\n\nexport const addUsers = (users: User[]) => ({\n  type: ActionTypes.addUsers,\n  payload: { users },\n});\n\nexport const fetchStart = () => ({\n  type: ActionTypes.fetchStart,\n});\n\nexport const fetchEnd = (errorMessage?: string) => ({\n  type: ActionTypes.fetchEnd,\n  payload: { errorMessage },\n});\n\nexport const apiGetUsers = (): AppThunk => async dispatch => {\n  dispatch(fetchStart());\n  try {\n    const users = await getUsers();\n    if (users.length === 0) {\n      const createdUsers = await postUsers(initialUsers);\n      dispatch(setUsers(createdUsers));\n    }\n    if (!!users) {\n      dispatch(setUsers(users));\n    }\n    dispatch(fetchEnd());\n  } catch (e) {\n    console.log(e);\n    dispatch(fetchEnd());\n  }\n};\n\nexport const apiCreateUsers = (users: User[]): AppThunk => async dispatch => {\n  dispatch(fetchStart);\n  try {\n    const createdUsers = await postUsers(users);\n    dispatch(addUsers(createdUsers));\n    dispatch(fetchEnd());\n  } catch (e) {\n    console.log(e);\n    dispatch(fetchEnd());\n  }\n};\n\nexport const apiAuthenticate = (username: string, password: string): AppThunk => async dispatch => {\n  dispatch(fetchStart());\n  try {\n    const authenticatedUser = await authenticate(username, password);\n    dispatch(setMe(authenticatedUser));\n    dispatch(fetchEnd());\n  } catch (e) {\n    console.log(e);\n    dispatch(fetchEnd(e.message));\n  }\n};\n","import { useEffect, useCallback, useMemo, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { RootReducer } from '../rootReducer';\nimport { apiAuthenticate, apiGetUsers } from './actions';\nimport { useHistory } from 'react-router';\nimport { useMe } from '../me/hooks';\nimport { UserRoles } from './types';\nimport { orderStatuses } from '../orders/types';\nimport { isAllowedOrderAction, AllowedAction } from '../../allowedActionsConfig';\n\nexport const useGetUsers = (forceFetch?: boolean) => {\n  const dispatch = useDispatch();\n  const { users, loading, hasLoaded, errorMessage } = useSelector((state: RootReducer) => state.users);\n\n  useEffect(() => {\n    if ((!hasLoaded || forceFetch) && !loading) {\n      dispatch(apiGetUsers());\n    }\n  }, [hasLoaded, loading, forceFetch, dispatch]);\n\n  return {\n    users,\n    loading,\n    hasLoaded,\n    errorMessage,\n  };\n};\n\nexport const useAuthenticate = () => {\n  const dispatch = useDispatch();\n  const [redirect, setRedirect] = useState(false);\n  const { me } = useSelector((state: RootReducer) => state.me);\n  const { errorMessage, loading } = useSelector((state: RootReducer) => state.users);\n  const history = useHistory();\n\n  const authenticated = useMemo(() => !!me, [me]);\n\n  const authenticate = useCallback(\n    (username: string, password: string) => {\n      setRedirect(true);\n      dispatch(apiAuthenticate(username, password));\n    },\n    [dispatch],\n  );\n\n  useEffect(() => {\n    if (redirect) {\n      setRedirect(false);\n      history.push('/');\n    }\n  }, [redirect, history]);\n\n  return {\n    authenticated,\n    authenticate,\n    errorMessage,\n    loading,\n  };\n};\n\nexport const useAllowAdmin = () => {\n  const { me } = useMe();\n  const { push } = useHistory();\n\n  useEffect(() => {\n    if (me && me.role !== UserRoles.admin) {\n      push('/');\n    }\n  }, [me, push]);\n};\n\nexport const useAllowedActions = () => {\n  const { role } = useMe();\n  return (orderStatus: orderStatuses, key: AllowedAction) => isAllowedOrderAction(role, orderStatus, key);\n};\n","export enum ActionTypes {\n  setUsers = 'users/setUsers',\n  updateUsers = 'users/updateUsers',\n  removeUsers = 'users/removeUsers',\n  addUsers = 'users/addUsers',\n  fetchStart = 'users/fetchStart',\n  fetchEnd = 'users/fetchEnd',\n}\n\nexport enum UserRoles {\n  admin = 'admin',\n  client = 'client',\n  unAuthenticated = 'unAuthenticated',\n}\n\nexport interface User {\n  id: string;\n  name: string;\n  surname: string;\n  username: string;\n  password: string;\n  role: UserRoles;\n}\n\nexport interface UsersReducer {\n  users: User[];\n  loading: boolean;\n  hasLoaded: boolean;\n  errorMessage: string | '';\n}\n","export const getFromStorage = (key: string, defaultValue: string) =>\n  JSON.parse(localStorage.getItem(key) || defaultValue);\n\nexport const setToStorage = <ValueType>(key: string, value: ValueType) =>\n  localStorage.setItem(key, JSON.stringify(value));\n\nexport const cachedStorage = <T>(key: string, defaultValue: string) => {\n  let data: T = getFromStorage(key, defaultValue);\n  const handleSetToStorage = (value: T) => {\n    data = value;\n    setToStorage<T>(key, value);\n  };\n  const handleGetFromStorage = (): T => {\n    if (data) {\n      return data;\n    }\n    data = getFromStorage(key, defaultValue);\n    return data;\n  };\n  return {\n    get: handleGetFromStorage,\n    set: handleSetToStorage,\n  };\n};\n","import { timeout } from '../helpers';\nimport { cachedStorage } from './storage';\nimport { uuid } from 'uuidv4';\n\ninterface BaseItem {\n  id?: string;\n}\n\nexport const crud = <ItemType extends BaseItem>(storageKey: string) => {\n  interface StorageItems {\n    [k: string]: ItemType;\n  }\n  interface Storage {\n    items: StorageItems;\n    keys: string[];\n  }\n  const storage = cachedStorage<Storage>(\n    storageKey,\n    JSON.stringify({\n      items: {},\n      keys: [],\n    }),\n  );\n\n  const getItems = async (): Promise<ItemType[]> => {\n    // await timeout(1000);\n    const { items, keys } = storage.get();\n    return keys.map(k => items[k]);\n  };\n\n  const createItems = async (newItems: ItemType[]): Promise<ItemType[]> => {\n    await timeout(1000);\n    const { keys, items } = storage.get();\n    const _items = newItems.map(item => ({ ...item, id: uuid() }));\n    const _newItems = _items.reduce((acc, item) => ({ ...acc, [item.id]: item }), {});\n    const _itemsStorage = {\n      keys: [...keys, ...Object.keys(_newItems)],\n      items: { ...items, ..._newItems },\n    };\n    storage.set(_itemsStorage);\n    return _items;\n  };\n\n  const updateItems = async (updatedItems: ItemType[]): Promise<ItemType[]> => {\n    await timeout(1000);\n    const { keys, items } = storage.get();\n\n    const _items = updatedItems.reduce((acc, item) => ({ ...acc, [item.id || '']: item }), {});\n\n    const _itemsStorage = {\n      keys,\n      items: { ...items, ..._items },\n    };\n\n    storage.set(_itemsStorage);\n\n    return updatedItems;\n  };\n\n  const deleteItems = async (ids: string[]): Promise<ItemType[]> => {\n    await timeout(1000);\n    const { keys, items } = storage.get();\n\n    const deletedItems = ids.map(id => items[id]);\n    const _keys = keys.filter(k => !ids.includes(k));\n    const _items = _keys.reduce((acc, k) => ({ ...acc, [k]: items[k] }), {});\n\n    const _itemsStorage = {\n      keys,\n      items: _items,\n    };\n\n    storage.set(_itemsStorage);\n\n    return deletedItems;\n  };\n\n  return {\n    getItems,\n    createItems,\n    updateItems,\n    deleteItems,\n  };\n};\n","import { UserRoles } from './reducers/users/types';\nimport { orderStatuses } from './reducers/orders/types';\n\nexport const actions = {\n  cancelMyOrder: {\n    userRoles: [UserRoles.client],\n    orderStatuses: [orderStatuses.created, orderStatuses.dispatched],\n  },\n  adminCancelOrder: {\n    userRoles: [UserRoles.admin],\n    orderStatuses: [orderStatuses.created, orderStatuses.dispatched],\n  },\n  adminDispatchOrder: {\n    userRoles: [UserRoles.admin],\n    orderStatuses: [orderStatuses.created],\n  },\n  adminCompleteOrder: {\n    userRoles: [UserRoles.admin],\n    orderStatuses: [orderStatuses.dispatched],\n  },\n};\n\nexport type AllowedActionKey = keyof typeof actions;\nexport type AllowedAction = typeof actions[AllowedActionKey];\n\nexport const isAllowedOrderAction = (userRole: UserRoles, orderStatus: orderStatuses, action: AllowedAction) =>\n  action.orderStatuses.includes(orderStatus) && action.userRoles.includes(userRole);\n"],"sourceRoot":""}